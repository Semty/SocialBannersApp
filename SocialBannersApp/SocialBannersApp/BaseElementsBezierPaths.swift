//
//  BaseElementsBezierPaths.swift
//  SocialBanners
//
//  Created by IvanVorobei on 6/2/17.
//  Copyright Â© 2017 IvanVorobei. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class BaseElementsBezierPaths : NSObject {
    
    //// Cache
    
    private struct Cache {
        static let fillColor: NSColor = NSColor(red: 0.078, green: 0.671, blue: 0.984, alpha: 1)
    }
    
    //// Colors
    
    public dynamic class var fillColor: NSColor { return Cache.fillColor }
    
    //// Drawing Methods
    
    public dynamic class func drawBackArrow(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 12, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 12, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 20)
        
        
        //// Color Declarations
        let strokeColor = NSColor(red: 0.078, green: 0.671, blue: 0.984, alpha: 1)
        
        //// Group 2
        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 10.17, y: 3.07))
        bezier2Path.curve(to: NSPoint(x: 9.85, y: 3.2), controlPoint1: NSPoint(x: 10.09, y: 3.15), controlPoint2: NSPoint(x: 9.97, y: 3.2))
        bezier2Path.curve(to: NSPoint(x: 9.53, y: 3.07), controlPoint1: NSPoint(x: 9.74, y: 3.2), controlPoint2: NSPoint(x: 9.62, y: 3.15))
        bezier2Path.curve(to: NSPoint(x: 9.53, y: 2.45), controlPoint1: NSPoint(x: 9.36, y: 2.9), controlPoint2: NSPoint(x: 9.36, y: 2.62))
        bezier2Path.line(to: NSPoint(x: 2.64, y: 9.4))
        bezier2Path.line(to: NSPoint(x: 1.94, y: 10.1))
        bezier2Path.line(to: NSPoint(x: 2.64, y: 10.8))
        bezier2Path.line(to: NSPoint(x: 9.53, y: 17.75))
        bezier2Path.curve(to: NSPoint(x: 9.53, y: 17.13), controlPoint1: NSPoint(x: 9.36, y: 17.58), controlPoint2: NSPoint(x: 9.36, y: 17.3))
        bezier2Path.curve(to: NSPoint(x: 10.17, y: 17.13), controlPoint1: NSPoint(x: 9.71, y: 16.96), controlPoint2: NSPoint(x: 10, y: 16.96))
        bezier2Path.line(to: NSPoint(x: 2.87, y: 9.79))
        bezier2Path.curve(to: NSPoint(x: 2.87, y: 10.41), controlPoint1: NSPoint(x: 3.04, y: 9.96), controlPoint2: NSPoint(x: 3.04, y: 10.24))
        bezier2Path.line(to: NSPoint(x: 10.17, y: 3.07))
        bezier2Path.close()
        bezier2Path.move(to: NSPoint(x: 8.75, y: 1.66))
        bezier2Path.line(to: NSPoint(x: 1.45, y: 9))
        bezier2Path.curve(to: NSPoint(x: 1.45, y: 11.2), controlPoint1: NSPoint(x: 0.85, y: 9.61), controlPoint2: NSPoint(x: 0.85, y: 10.59))
        bezier2Path.line(to: NSPoint(x: 8.75, y: 18.54))
        bezier2Path.curve(to: NSPoint(x: 10.95, y: 18.54), controlPoint1: NSPoint(x: 9.36, y: 19.15), controlPoint2: NSPoint(x: 10.35, y: 19.15))
        bezier2Path.curve(to: NSPoint(x: 10.96, y: 16.34), controlPoint1: NSPoint(x: 11.56, y: 17.93), controlPoint2: NSPoint(x: 11.56, y: 16.95))
        bezier2Path.line(to: NSPoint(x: 4.06, y: 9.4))
        bezier2Path.line(to: NSPoint(x: 4.06, y: 10.8))
        bezier2Path.line(to: NSPoint(x: 10.95, y: 3.86))
        bezier2Path.curve(to: NSPoint(x: 10.96, y: 1.66), controlPoint1: NSPoint(x: 11.56, y: 3.25), controlPoint2: NSPoint(x: 11.56, y: 2.27))
        bezier2Path.curve(to: NSPoint(x: 9.85, y: 1.2), controlPoint1: NSPoint(x: 10.66, y: 1.36), controlPoint2: NSPoint(x: 10.27, y: 1.2))
        bezier2Path.curve(to: NSPoint(x: 8.75, y: 1.66), controlPoint1: NSPoint(x: 9.44, y: 1.2), controlPoint2: NSPoint(x: 9.05, y: 1.36))
        bezier2Path.close()
        strokeColor.setFill()
        bezier2Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    public dynamic class func drawArea(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 167, height: 9), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 167, height: 9), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 167, y: resizedFrame.height / 9)
        
        
        //// Color Declarations
        let fillColor2 = NSColor(red: 1, green: 1, blue: 1, alpha: 1)
        
        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 0, y: 9))
        bezierPath.line(to: NSPoint(x: 167, y: 9))
        bezierPath.line(to: NSPoint(x: 167, y: 7.37))
        bezierPath.curve(to: NSPoint(x: 83.5, y: 2), controlPoint1: NSPoint(x: 167, y: 7.37), controlPoint2: NSPoint(x: 127.33, y: 2))
        bezierPath.curve(to: NSPoint(x: 0, y: 7.37), controlPoint1: NSPoint(x: 39.67, y: 2), controlPoint2: NSPoint(x: 0, y: 7.37))
        bezierPath.line(to: NSPoint(x: 0, y: 9))
        bezierPath.close()
        bezierPath.windingRule = .evenOddWindingRule
        fillColor2.setFill()
        bezierPath.fill()
        
        NSGraphicsContext.restoreGraphicsState()
        
    }
    
    
    
    
    @objc(BaseElementsBezierPathsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }
            
            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
